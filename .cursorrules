You are working on an AI-powered intake specialist for financial applications. Key aspects:

ARCHITECTURE:
- Uses ReAct loops implemented with LangGraph/LangChain for the core conversation engine
- Single ReAct loop handles all requests, with dynamic system prompts based on state
- State management tracks progress through required information gathering
- Conversational interface that allows free-form discussion while guiding toward information goals

BEHAVIORAL GUIDELINES:
- Allow natural, unstructured conversation while subtly guiding toward required information
- Don't enforce rigid phases, but maintain awareness of what information is still needed
- Be able to revisit topics naturally if more clarification is needed
- Handle context switching gracefully (e.g., discussing company info early, then returning to it later)
- Generate clarifying questions autonomously based on context and previous responses

INFORMATION REQUIREMENTS:
- Track a checklist of minimum required fields for financial applications
- Maintain state about what information has been gathered and what's still needed
- Allow gathering information in any order while ensuring completeness
- Generate relevant follow-up questions based on provided information
- Validate information completeness before proceeding with evaluations

TECHNICAL CONTEXT:
- Built using LangGraph for workflow management
- Implements ReAct pattern for tool usage and decision making
- Maintains server-side state for conversation progress
- Uses dynamic system prompts based on current state
- Integrates with front-end through API endpoints 

DEVELOPMENT APPROACH:
- Take small, verifiable steps
- Each change should be immediately testable
- Verify functionality before moving to next step
- Build complexity gradually

DEVELOPMENT PLAN:

PHASE 1: CLI PROTOTYPE (COMPLETED)
✓ Set up Node.js project with dependencies
✓ Create basic CLI interface with input/output
✓ Define state management structure
✓ Test state management tools in isolation
✓ Set up OpenAI integration
✓ Create and test system prompt template
✓ Implement basic ReAct loop:
  ✓ Set up ReAct agent with our tools
  ✓ Connect tools to state management
  ✓ Test agent with simple conversations
✓ Add basic conversation capabilities:
  ✓ Handle greetings and basic questions
  ✓ Extract information from natural conversation
  ✓ Guide user toward providing missing information

PHASE 2: ENHANCE CONVERSATION CAPABILITIES (IN PROGRESS)
- Improve tool usage and state management:
  * Add validation for field values
  * Add error recovery for invalid inputs
  * Implement better state persistence
- Add more sophisticated conversation flows:
  * Handle corrections to previously provided information
  * Support clarifying questions for ambiguous inputs
  * Add context-aware follow-up questions
- Enhance error handling:
  * Add graceful recovery from API errors
  * Improve error messages for users
  * Add retry logic for transient failures

PHASE 3: EXPAND INFORMATION GATHERING
- Add more required fields:
  * Company size
  * Industry sector
  * Annual revenue
  * Desired financing amount
- Implement field dependencies:
  * Conditional fields based on previous answers
  * Industry-specific questions
  * Region-specific requirements
- Add validation rules:
  * Format validation for specific fields
  * Cross-field validation rules
  * Required vs optional fields

PHASE 4: IMPROVE USER EXPERIENCE
- Add conversation summarization:
  * Provide progress updates
  * Summarize gathered information
  * Highlight missing information
- Implement conversation recovery:
  * Save conversation state
  * Allow resuming previous sessions
  * Handle conversation context switches
- Add help and guidance:
  * Provide examples when needed
  * Offer suggestions for unclear responses
  * Add command help (e.g., 'help', 'status') 